{"version":3,"sources":["webpack:///./src/api/promiseWrapper.ts","webpack:///./src/api/api.ts","webpack:///./src/spa/app/pages/pageWrapper/pageWrapper.tsx","webpack:///./src/spa/app/pages/friendsPage/friendsPage.tsx"],"names":["promise","result","status","suspender","then","r","e","read","gqlString","Promise","resolve","body","JSON","stringify","query","loc","source","a","post","headers","withCredentials","response","data","get","promiseWrapper","Component","setHydration","isAnimationComplete","setHydrationStatus","resource","api","PageContent","isHydrated","fallback","animationData","autoplay","loop","size"],"mappings":"iIAUe,WAAIA,GACjB,IACIC,EADAC,EAAS,UAEPC,EAAYH,EAAQI,MACxB,SAACC,GACCH,EAAS,UACTD,EAASI,KAEX,SAACC,GACCJ,EAAS,QACTD,EAASK,KAGb,MAAO,CACLC,KAAI,WACF,GAAe,YAAXL,EACF,MAAMC,EACD,GAAe,UAAXD,EACT,MAAMD,EACD,GAAe,YAAXC,EACT,OAAOD,KCLA,EAPD,SAACO,GACb,IAAMR,EAXI,SAACQ,GAAuC,WAAIC,SAAQ,SAACC,GAC/D,IAAMC,EAAOC,KAAKC,UAAU,CAAEC,MAAON,EAAUO,IAAIC,OAAOL,OAK1D,EAAAM,EAAMC,KAAK,+CAA6BP,EAJzB,CACbQ,QAAS,CAAE,eAAgB,oBAC3BC,iBAAiB,IAGhBhB,MAAK,SAACiB,GAAa,OAAAX,EAAQW,EAASC,KAAKA,YAI5BC,CAAIf,GACpB,MAAO,CACLc,KAAME,EAAexB,K,QC0EV,IAhEK,SAAC,G,IACnByB,EAAA,EAAAA,UACAjB,EAAA,EAAAA,UACA,IAAAkB,oBAAA,IAAe,GAAf,EAGA,IAAKlB,EAAW,CAkBd,OAjB6B,WACrB,oBAAEmB,EAAA,EAAAA,oBAAqBC,EAAA,EAAAA,mBAU7B,OAPA,aAAgB,WACVF,GACFE,GAAmB,KAEpB,CAACA,IAGAD,EACK,gBAACF,EAAS,MAEZ,MAOX,IAAMI,EAAWC,EAAUtB,GAgBrBuB,EAA0C,SAAC,G,IAAEJ,EAAA,EAAAA,oBAAqBC,EAAA,EAAAA,mBAChEN,EAAOO,EAASP,KAAKf,OAU3B,OAPA,aAAgB,WACVmB,GACFE,GAAmB,KAEpB,CAACA,IAGAD,EACK,gBAACF,EAAS,CAACH,KAAMA,IAEnB,MAGT,OA/BuB,WACf,oBAAEK,EAAA,EAAAA,oBAAqBK,EAAA,EAAAA,WAAYJ,EAAA,EAAAA,mBAGzC,OACE,gBAAC,WAAc,CAACK,SAAUD,GAAc,gBAAC,IAAO,OAC9C,gBAACD,EAAW,CACVJ,oBAAqBA,EACrBC,mBAAoBA,Q,yl5ECrE9B,6CAce,sBAAY,CAAEH,UATC,WAAM,OAClC,gBAAC,IAAY,CACXS,cAAe,EACfC,UAAQ,EACRC,MAAI,EACJC,KAAM","file":"43.bundle.js","sourcesContent":["// Source:\n// https://reactjs.org/docs/concurrent-mode-suspense.html#what-is-suspense-exactly\n// https://codesandbox.io/s/frosty-hermann-bztrp\n\n/* eslint-disable consistent-return */\n\nexport interface PromiseWrapper<T> {\n  read(): T;\n}\n\nexport default <T>(promise: Promise<T>): PromiseWrapper<T> => {\n  let status = 'pending';\n  let result: T;\n  const suspender = promise.then(\n    (r) => {\n      status = 'success';\n      result = r;\n    },\n    (e) => {\n      status = 'error';\n      result = e;\n    },\n  );\n  return {\n    read() {\n      if (status === 'pending') {\n        throw suspender;\n      } else if (status === 'error') {\n        throw result;\n      } else if (status === 'success') {\n        return result;\n      }\n    },\n  };\n};\n","import axios from 'axios';\nimport promiseWrapper, { PromiseWrapper } from 'api/promiseWrapper';\nimport { GqlString } from 'types/gqlTypes';\n\nexport interface Resource<T> {\n  data: PromiseWrapper<T>;\n}\n\nconst get = (gqlString: GqlString): Promise<any> => new Promise((resolve) => {\n  const body = JSON.stringify({ query: gqlString.loc.source.body });\n  const config = {\n    headers: { 'Content-Type': 'application/json' },\n    withCredentials: true,\n  };\n  axios.post(`http://${process.env.URI}`, body, config)\n    .then((response) => resolve(response.data.data));\n});\n\nconst query = (gqlString: GqlString): Resource<any> => {\n  const promise = get(gqlString);\n  return {\n    data: promiseWrapper(promise),\n  };\n};\n\nexport default {\n  query,\n};\n","// This objective of this wrapper is to create a general api that takes a page of our app\n// along with the GQL query that derives all necessary data for said page and runs that query.\n// The data is then provided to the page to render its necessary components.\n\n// when `setHydration=false`, that means that once our data has been retrieved from the backend\n// and / or our wrapped component (`Component`) has mounted, we DO NOT want to stop our page's\n// spinner / loading animation. This is because there might be additional work that is *still*\n// happening in the background of the wrapped component after data has been drilled, such as a\n// context reducer being mutated.\n\nimport * as React from 'react';\nimport Spinner from 'fallbacks/spinner/spinner';\nimport api from 'api/api';\nimport { GqlString } from 'types/gqlTypes';\nimport { useHydrationContext } from 'context/hydrationContext/hydrationContext';\n\ninterface PageContentProps {\n  isAnimationComplete: boolean;\n  setHydrationStatus: (status: boolean) => void;\n}\n\ninterface Props {\n  Component: React.FC<WrappedComponentProps>;\n  gqlString?: GqlString;\n  setHydration?: boolean;\n}\n\ninterface WrappedComponentProps {\n  data?: any;\n}\n\nconst pageWrapper = ({\n  Component,\n  gqlString,\n  setHydration = true,\n}: Props): React.FC => {\n  // ----- NO DATA IS NEEDED ----- //\n  if (!gqlString) {\n    const NoDataPage: React.FC = () => {\n      const { isAnimationComplete, setHydrationStatus } = useHydrationContext();\n\n      // See *1 in `hydrationContext.tsx`\n      React.useEffect(() => {\n        if (setHydration) {\n          setHydrationStatus(true);\n        }\n      }, [setHydrationStatus]);\n\n      // See *2 in `hydrationContext.tsx`\n      if (isAnimationComplete) {\n        return <Component />;\n      }\n      return null;\n    };\n\n    return NoDataPage;\n  }\n\n  // ----- DATA IS NEEDED ----- //\n  const resource = api.query(gqlString);\n\n  const Page: React.FC = () => {\n    const { isAnimationComplete, isHydrated, setHydrationStatus } = useHydrationContext();\n    // See *1 notes in `hydrationContext.tsx` about why our fallback `Spinner` may not render unless\n    // our app has been hydrated.\n    return (\n      <React.Suspense fallback={isHydrated && <Spinner />}>\n        <PageContent\n          isAnimationComplete={isAnimationComplete}\n          setHydrationStatus={setHydrationStatus}\n        />\n      </React.Suspense>\n    );\n  };\n\n  const PageContent: React.FC<PageContentProps> = ({ isAnimationComplete, setHydrationStatus }) => {\n    const data = resource.data.read();\n\n    // See *1 in `hydrationContext.tsx`\n    React.useEffect(() => {\n      if (setHydration) {\n        setHydrationStatus(true);\n      }\n    }, [setHydrationStatus]);\n\n    // See *2 in `hydrationContext.tsx`\n    if (isAnimationComplete) {\n      return <Component data={data} />;\n    }\n    return null;\n  };\n\n  return Page;\n};\n\nexport default pageWrapper;\n","import * as React from 'react';\nimport LottiePlayer from 'lotty/lottiePlayer';\nimport followingAnimation from 'lotty/lotties/following.json';\nimport pageWrapper from 'pages/pageWrapper/pageWrapper';\n\nconst FriendsPage: React.FC = () => (\n  <LottiePlayer\n    animationData={followingAnimation}\n    autoplay\n    loop\n    size={600}\n  />\n);\n\nexport default pageWrapper({ Component: FriendsPage });\n"],"sourceRoot":""}
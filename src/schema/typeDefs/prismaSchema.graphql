type AggregateCard {
  count: Int!
}

type AggregateCardData {
  count: Int!
}

type AggregateGifCardData {
  count: Int!
}

type AggregateImageCardData {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateYoutubeCardData {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Card {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  cardData: CardData!
  category: CardCategory!
  isFavorite: Boolean!
  isToDo: Boolean!
  title: String!
  type: CardType!
  user: User!
}

enum CardCategory {
  Gif
  Image
  Video
}

type CardConnection {
  pageInfo: PageInfo!
  edges: [CardEdge]!
  aggregate: AggregateCard!
}

input CardCreateInput {
  id: ID
  cardData: CardDataCreateOneInput!
  category: CardCategory!
  isFavorite: Boolean!
  isToDo: Boolean!
  title: String!
  type: CardType!
  user: UserCreateOneWithoutCardsInput!
}

input CardCreateManyWithoutUserInput {
  create: [CardCreateWithoutUserInput!]
  connect: [CardWhereUniqueInput!]
}

input CardCreateWithoutUserInput {
  id: ID
  cardData: CardDataCreateOneInput!
  category: CardCategory!
  isFavorite: Boolean!
  isToDo: Boolean!
  title: String!
  type: CardType!
}

type CardData {
  id: ID!
  gifCardData: GifCardData
  imageCardData: ImageCardData
  youtubeCardData: YoutubeCardData
}

type CardDataConnection {
  pageInfo: PageInfo!
  edges: [CardDataEdge]!
  aggregate: AggregateCardData!
}

input CardDataCreateInput {
  id: ID
  gifCardData: GifCardDataCreateOneInput
  imageCardData: ImageCardDataCreateOneInput
  youtubeCardData: YoutubeCardDataCreateOneInput
}

input CardDataCreateOneInput {
  create: CardDataCreateInput
  connect: CardDataWhereUniqueInput
}

type CardDataEdge {
  node: CardData!
  cursor: String!
}

enum CardDataOrderByInput {
  id_ASC
  id_DESC
}

type CardDataPreviousValues {
  id: ID!
}

type CardDataSubscriptionPayload {
  mutation: MutationType!
  node: CardData
  updatedFields: [String!]
  previousValues: CardDataPreviousValues
}

input CardDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CardDataWhereInput
  AND: [CardDataSubscriptionWhereInput!]
  OR: [CardDataSubscriptionWhereInput!]
  NOT: [CardDataSubscriptionWhereInput!]
}

input CardDataUpdateDataInput {
  gifCardData: GifCardDataUpdateOneInput
  imageCardData: ImageCardDataUpdateOneInput
  youtubeCardData: YoutubeCardDataUpdateOneInput
}

input CardDataUpdateInput {
  gifCardData: GifCardDataUpdateOneInput
  imageCardData: ImageCardDataUpdateOneInput
  youtubeCardData: YoutubeCardDataUpdateOneInput
}

input CardDataUpdateOneRequiredInput {
  create: CardDataCreateInput
  update: CardDataUpdateDataInput
  upsert: CardDataUpsertNestedInput
  connect: CardDataWhereUniqueInput
}

input CardDataUpsertNestedInput {
  update: CardDataUpdateDataInput!
  create: CardDataCreateInput!
}

input CardDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  gifCardData: GifCardDataWhereInput
  imageCardData: ImageCardDataWhereInput
  youtubeCardData: YoutubeCardDataWhereInput
  AND: [CardDataWhereInput!]
  OR: [CardDataWhereInput!]
  NOT: [CardDataWhereInput!]
}

input CardDataWhereUniqueInput {
  id: ID
}

type CardEdge {
  node: Card!
  cursor: String!
}

enum CardOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  category_ASC
  category_DESC
  isFavorite_ASC
  isFavorite_DESC
  isToDo_ASC
  isToDo_DESC
  title_ASC
  title_DESC
  type_ASC
  type_DESC
}

type CardPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  category: CardCategory!
  isFavorite: Boolean!
  isToDo: Boolean!
  title: String!
  type: CardType!
}

input CardScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  category: CardCategory
  category_not: CardCategory
  category_in: [CardCategory!]
  category_not_in: [CardCategory!]
  isFavorite: Boolean
  isFavorite_not: Boolean
  isToDo: Boolean
  isToDo_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  type: CardType
  type_not: CardType
  type_in: [CardType!]
  type_not_in: [CardType!]
  AND: [CardScalarWhereInput!]
  OR: [CardScalarWhereInput!]
  NOT: [CardScalarWhereInput!]
}

type CardSubscriptionPayload {
  mutation: MutationType!
  node: Card
  updatedFields: [String!]
  previousValues: CardPreviousValues
}

input CardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CardWhereInput
  AND: [CardSubscriptionWhereInput!]
  OR: [CardSubscriptionWhereInput!]
  NOT: [CardSubscriptionWhereInput!]
}

enum CardType {
  Gif
  Image
  Youtube
}

input CardUpdateInput {
  cardData: CardDataUpdateOneRequiredInput
  category: CardCategory
  isFavorite: Boolean
  isToDo: Boolean
  title: String
  type: CardType
  user: UserUpdateOneRequiredWithoutCardsInput
}

input CardUpdateManyDataInput {
  category: CardCategory
  isFavorite: Boolean
  isToDo: Boolean
  title: String
  type: CardType
}

input CardUpdateManyMutationInput {
  category: CardCategory
  isFavorite: Boolean
  isToDo: Boolean
  title: String
  type: CardType
}

input CardUpdateManyWithoutUserInput {
  create: [CardCreateWithoutUserInput!]
  delete: [CardWhereUniqueInput!]
  connect: [CardWhereUniqueInput!]
  set: [CardWhereUniqueInput!]
  disconnect: [CardWhereUniqueInput!]
  update: [CardUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CardUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CardScalarWhereInput!]
  updateMany: [CardUpdateManyWithWhereNestedInput!]
}

input CardUpdateManyWithWhereNestedInput {
  where: CardScalarWhereInput!
  data: CardUpdateManyDataInput!
}

input CardUpdateWithoutUserDataInput {
  cardData: CardDataUpdateOneRequiredInput
  category: CardCategory
  isFavorite: Boolean
  isToDo: Boolean
  title: String
  type: CardType
}

input CardUpdateWithWhereUniqueWithoutUserInput {
  where: CardWhereUniqueInput!
  data: CardUpdateWithoutUserDataInput!
}

input CardUpsertWithWhereUniqueWithoutUserInput {
  where: CardWhereUniqueInput!
  update: CardUpdateWithoutUserDataInput!
  create: CardCreateWithoutUserInput!
}

input CardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  cardData: CardDataWhereInput
  category: CardCategory
  category_not: CardCategory
  category_in: [CardCategory!]
  category_not_in: [CardCategory!]
  isFavorite: Boolean
  isFavorite_not: Boolean
  isToDo: Boolean
  isToDo_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  type: CardType
  type_not: CardType
  type_in: [CardType!]
  type_not_in: [CardType!]
  user: UserWhereInput
  AND: [CardWhereInput!]
  OR: [CardWhereInput!]
  NOT: [CardWhereInput!]
}

input CardWhereUniqueInput {
  id: ID
}

scalar DateTime

type GifCardData {
  id: ID!
  gifUrl: String!
}

type GifCardDataConnection {
  pageInfo: PageInfo!
  edges: [GifCardDataEdge]!
  aggregate: AggregateGifCardData!
}

input GifCardDataCreateInput {
  id: ID
  gifUrl: String!
}

input GifCardDataCreateOneInput {
  create: GifCardDataCreateInput
  connect: GifCardDataWhereUniqueInput
}

type GifCardDataEdge {
  node: GifCardData!
  cursor: String!
}

enum GifCardDataOrderByInput {
  id_ASC
  id_DESC
  gifUrl_ASC
  gifUrl_DESC
}

type GifCardDataPreviousValues {
  id: ID!
  gifUrl: String!
}

type GifCardDataSubscriptionPayload {
  mutation: MutationType!
  node: GifCardData
  updatedFields: [String!]
  previousValues: GifCardDataPreviousValues
}

input GifCardDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GifCardDataWhereInput
  AND: [GifCardDataSubscriptionWhereInput!]
  OR: [GifCardDataSubscriptionWhereInput!]
  NOT: [GifCardDataSubscriptionWhereInput!]
}

input GifCardDataUpdateDataInput {
  gifUrl: String
}

input GifCardDataUpdateInput {
  gifUrl: String
}

input GifCardDataUpdateManyMutationInput {
  gifUrl: String
}

input GifCardDataUpdateOneInput {
  create: GifCardDataCreateInput
  update: GifCardDataUpdateDataInput
  upsert: GifCardDataUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: GifCardDataWhereUniqueInput
}

input GifCardDataUpsertNestedInput {
  update: GifCardDataUpdateDataInput!
  create: GifCardDataCreateInput!
}

input GifCardDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  gifUrl: String
  gifUrl_not: String
  gifUrl_in: [String!]
  gifUrl_not_in: [String!]
  gifUrl_lt: String
  gifUrl_lte: String
  gifUrl_gt: String
  gifUrl_gte: String
  gifUrl_contains: String
  gifUrl_not_contains: String
  gifUrl_starts_with: String
  gifUrl_not_starts_with: String
  gifUrl_ends_with: String
  gifUrl_not_ends_with: String
  AND: [GifCardDataWhereInput!]
  OR: [GifCardDataWhereInput!]
  NOT: [GifCardDataWhereInput!]
}

input GifCardDataWhereUniqueInput {
  id: ID
}

type ImageCardData {
  id: ID!
  imageUrl: String!
}

type ImageCardDataConnection {
  pageInfo: PageInfo!
  edges: [ImageCardDataEdge]!
  aggregate: AggregateImageCardData!
}

input ImageCardDataCreateInput {
  id: ID
  imageUrl: String!
}

input ImageCardDataCreateOneInput {
  create: ImageCardDataCreateInput
  connect: ImageCardDataWhereUniqueInput
}

type ImageCardDataEdge {
  node: ImageCardData!
  cursor: String!
}

enum ImageCardDataOrderByInput {
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
}

type ImageCardDataPreviousValues {
  id: ID!
  imageUrl: String!
}

type ImageCardDataSubscriptionPayload {
  mutation: MutationType!
  node: ImageCardData
  updatedFields: [String!]
  previousValues: ImageCardDataPreviousValues
}

input ImageCardDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ImageCardDataWhereInput
  AND: [ImageCardDataSubscriptionWhereInput!]
  OR: [ImageCardDataSubscriptionWhereInput!]
  NOT: [ImageCardDataSubscriptionWhereInput!]
}

input ImageCardDataUpdateDataInput {
  imageUrl: String
}

input ImageCardDataUpdateInput {
  imageUrl: String
}

input ImageCardDataUpdateManyMutationInput {
  imageUrl: String
}

input ImageCardDataUpdateOneInput {
  create: ImageCardDataCreateInput
  update: ImageCardDataUpdateDataInput
  upsert: ImageCardDataUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ImageCardDataWhereUniqueInput
}

input ImageCardDataUpsertNestedInput {
  update: ImageCardDataUpdateDataInput!
  create: ImageCardDataCreateInput!
}

input ImageCardDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  AND: [ImageCardDataWhereInput!]
  OR: [ImageCardDataWhereInput!]
  NOT: [ImageCardDataWhereInput!]
}

input ImageCardDataWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCard(data: CardCreateInput!): Card!
  updateCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card
  updateManyCards(data: CardUpdateManyMutationInput!, where: CardWhereInput): BatchPayload!
  upsertCard(where: CardWhereUniqueInput!, create: CardCreateInput!, update: CardUpdateInput!): Card!
  deleteCard(where: CardWhereUniqueInput!): Card
  deleteManyCards(where: CardWhereInput): BatchPayload!
  createCardData(data: CardDataCreateInput!): CardData!
  updateCardData(data: CardDataUpdateInput!, where: CardDataWhereUniqueInput!): CardData
  upsertCardData(where: CardDataWhereUniqueInput!, create: CardDataCreateInput!, update: CardDataUpdateInput!): CardData!
  deleteCardData(where: CardDataWhereUniqueInput!): CardData
  deleteManyCardDatas(where: CardDataWhereInput): BatchPayload!
  createGifCardData(data: GifCardDataCreateInput!): GifCardData!
  updateGifCardData(data: GifCardDataUpdateInput!, where: GifCardDataWhereUniqueInput!): GifCardData
  updateManyGifCardDatas(data: GifCardDataUpdateManyMutationInput!, where: GifCardDataWhereInput): BatchPayload!
  upsertGifCardData(where: GifCardDataWhereUniqueInput!, create: GifCardDataCreateInput!, update: GifCardDataUpdateInput!): GifCardData!
  deleteGifCardData(where: GifCardDataWhereUniqueInput!): GifCardData
  deleteManyGifCardDatas(where: GifCardDataWhereInput): BatchPayload!
  createImageCardData(data: ImageCardDataCreateInput!): ImageCardData!
  updateImageCardData(data: ImageCardDataUpdateInput!, where: ImageCardDataWhereUniqueInput!): ImageCardData
  updateManyImageCardDatas(data: ImageCardDataUpdateManyMutationInput!, where: ImageCardDataWhereInput): BatchPayload!
  upsertImageCardData(where: ImageCardDataWhereUniqueInput!, create: ImageCardDataCreateInput!, update: ImageCardDataUpdateInput!): ImageCardData!
  deleteImageCardData(where: ImageCardDataWhereUniqueInput!): ImageCardData
  deleteManyImageCardDatas(where: ImageCardDataWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createYoutubeCardData(data: YoutubeCardDataCreateInput!): YoutubeCardData!
  updateYoutubeCardData(data: YoutubeCardDataUpdateInput!, where: YoutubeCardDataWhereUniqueInput!): YoutubeCardData
  updateManyYoutubeCardDatas(data: YoutubeCardDataUpdateManyMutationInput!, where: YoutubeCardDataWhereInput): BatchPayload!
  upsertYoutubeCardData(where: YoutubeCardDataWhereUniqueInput!, create: YoutubeCardDataCreateInput!, update: YoutubeCardDataUpdateInput!): YoutubeCardData!
  deleteYoutubeCardData(where: YoutubeCardDataWhereUniqueInput!): YoutubeCardData
  deleteManyYoutubeCardDatas(where: YoutubeCardDataWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  card(where: CardWhereUniqueInput!): Card
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card]!
  cardsConnection(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardConnection!
  cardData(where: CardDataWhereUniqueInput!): CardData
  cardDatas(where: CardDataWhereInput, orderBy: CardDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CardData]!
  cardDatasConnection(where: CardDataWhereInput, orderBy: CardDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardDataConnection!
  gifCardData(where: GifCardDataWhereUniqueInput!): GifCardData
  gifCardDatas(where: GifCardDataWhereInput, orderBy: GifCardDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GifCardData]!
  gifCardDatasConnection(where: GifCardDataWhereInput, orderBy: GifCardDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GifCardDataConnection!
  imageCardData(where: ImageCardDataWhereUniqueInput!): ImageCardData
  imageCardDatas(where: ImageCardDataWhereInput, orderBy: ImageCardDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ImageCardData]!
  imageCardDatasConnection(where: ImageCardDataWhereInput, orderBy: ImageCardDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageCardDataConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  youtubeCardData(where: YoutubeCardDataWhereUniqueInput!): YoutubeCardData
  youtubeCardDatas(where: YoutubeCardDataWhereInput, orderBy: YoutubeCardDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [YoutubeCardData]!
  youtubeCardDatasConnection(where: YoutubeCardDataWhereInput, orderBy: YoutubeCardDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): YoutubeCardDataConnection!
  node(id: ID!): Node
}

type Subscription {
  card(where: CardSubscriptionWhereInput): CardSubscriptionPayload
  cardData(where: CardDataSubscriptionWhereInput): CardDataSubscriptionPayload
  gifCardData(where: GifCardDataSubscriptionWhereInput): GifCardDataSubscriptionPayload
  imageCardData(where: ImageCardDataSubscriptionWhereInput): ImageCardDataSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  youtubeCardData(where: YoutubeCardDataSubscriptionWhereInput): YoutubeCardDataSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card!]
  email: String!
  name: String
  username: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  cards: CardCreateManyWithoutUserInput
  email: String!
  name: String
  username: String!
  password: String!
}

input UserCreateOneWithoutCardsInput {
  create: UserCreateWithoutCardsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCardsInput {
  id: ID
  email: String!
  name: String
  username: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String
  username: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  cards: CardUpdateManyWithoutUserInput
  email: String
  name: String
  username: String
  password: String
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  username: String
  password: String
}

input UserUpdateOneRequiredWithoutCardsInput {
  create: UserCreateWithoutCardsInput
  update: UserUpdateWithoutCardsDataInput
  upsert: UserUpsertWithoutCardsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCardsDataInput {
  email: String
  name: String
  username: String
  password: String
}

input UserUpsertWithoutCardsInput {
  update: UserUpdateWithoutCardsDataInput!
  create: UserCreateWithoutCardsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  cards_every: CardWhereInput
  cards_some: CardWhereInput
  cards_none: CardWhereInput
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}

type YoutubeCardData {
  id: ID!
  channelThumbnail: String!
  channelTitle: String!
  duration: String!
  likes: String!
  publishedAt: String!
  videoId: String!
  videoThumbnail: String!
  videoTitle: String!
  views: String!
}

type YoutubeCardDataConnection {
  pageInfo: PageInfo!
  edges: [YoutubeCardDataEdge]!
  aggregate: AggregateYoutubeCardData!
}

input YoutubeCardDataCreateInput {
  id: ID
  channelThumbnail: String!
  channelTitle: String!
  duration: String!
  likes: String!
  publishedAt: String!
  videoId: String!
  videoThumbnail: String!
  videoTitle: String!
  views: String!
}

input YoutubeCardDataCreateOneInput {
  create: YoutubeCardDataCreateInput
  connect: YoutubeCardDataWhereUniqueInput
}

type YoutubeCardDataEdge {
  node: YoutubeCardData!
  cursor: String!
}

enum YoutubeCardDataOrderByInput {
  id_ASC
  id_DESC
  channelThumbnail_ASC
  channelThumbnail_DESC
  channelTitle_ASC
  channelTitle_DESC
  duration_ASC
  duration_DESC
  likes_ASC
  likes_DESC
  publishedAt_ASC
  publishedAt_DESC
  videoId_ASC
  videoId_DESC
  videoThumbnail_ASC
  videoThumbnail_DESC
  videoTitle_ASC
  videoTitle_DESC
  views_ASC
  views_DESC
}

type YoutubeCardDataPreviousValues {
  id: ID!
  channelThumbnail: String!
  channelTitle: String!
  duration: String!
  likes: String!
  publishedAt: String!
  videoId: String!
  videoThumbnail: String!
  videoTitle: String!
  views: String!
}

type YoutubeCardDataSubscriptionPayload {
  mutation: MutationType!
  node: YoutubeCardData
  updatedFields: [String!]
  previousValues: YoutubeCardDataPreviousValues
}

input YoutubeCardDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: YoutubeCardDataWhereInput
  AND: [YoutubeCardDataSubscriptionWhereInput!]
  OR: [YoutubeCardDataSubscriptionWhereInput!]
  NOT: [YoutubeCardDataSubscriptionWhereInput!]
}

input YoutubeCardDataUpdateDataInput {
  channelThumbnail: String
  channelTitle: String
  duration: String
  likes: String
  publishedAt: String
  videoId: String
  videoThumbnail: String
  videoTitle: String
  views: String
}

input YoutubeCardDataUpdateInput {
  channelThumbnail: String
  channelTitle: String
  duration: String
  likes: String
  publishedAt: String
  videoId: String
  videoThumbnail: String
  videoTitle: String
  views: String
}

input YoutubeCardDataUpdateManyMutationInput {
  channelThumbnail: String
  channelTitle: String
  duration: String
  likes: String
  publishedAt: String
  videoId: String
  videoThumbnail: String
  videoTitle: String
  views: String
}

input YoutubeCardDataUpdateOneInput {
  create: YoutubeCardDataCreateInput
  update: YoutubeCardDataUpdateDataInput
  upsert: YoutubeCardDataUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: YoutubeCardDataWhereUniqueInput
}

input YoutubeCardDataUpsertNestedInput {
  update: YoutubeCardDataUpdateDataInput!
  create: YoutubeCardDataCreateInput!
}

input YoutubeCardDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  channelThumbnail: String
  channelThumbnail_not: String
  channelThumbnail_in: [String!]
  channelThumbnail_not_in: [String!]
  channelThumbnail_lt: String
  channelThumbnail_lte: String
  channelThumbnail_gt: String
  channelThumbnail_gte: String
  channelThumbnail_contains: String
  channelThumbnail_not_contains: String
  channelThumbnail_starts_with: String
  channelThumbnail_not_starts_with: String
  channelThumbnail_ends_with: String
  channelThumbnail_not_ends_with: String
  channelTitle: String
  channelTitle_not: String
  channelTitle_in: [String!]
  channelTitle_not_in: [String!]
  channelTitle_lt: String
  channelTitle_lte: String
  channelTitle_gt: String
  channelTitle_gte: String
  channelTitle_contains: String
  channelTitle_not_contains: String
  channelTitle_starts_with: String
  channelTitle_not_starts_with: String
  channelTitle_ends_with: String
  channelTitle_not_ends_with: String
  duration: String
  duration_not: String
  duration_in: [String!]
  duration_not_in: [String!]
  duration_lt: String
  duration_lte: String
  duration_gt: String
  duration_gte: String
  duration_contains: String
  duration_not_contains: String
  duration_starts_with: String
  duration_not_starts_with: String
  duration_ends_with: String
  duration_not_ends_with: String
  likes: String
  likes_not: String
  likes_in: [String!]
  likes_not_in: [String!]
  likes_lt: String
  likes_lte: String
  likes_gt: String
  likes_gte: String
  likes_contains: String
  likes_not_contains: String
  likes_starts_with: String
  likes_not_starts_with: String
  likes_ends_with: String
  likes_not_ends_with: String
  publishedAt: String
  publishedAt_not: String
  publishedAt_in: [String!]
  publishedAt_not_in: [String!]
  publishedAt_lt: String
  publishedAt_lte: String
  publishedAt_gt: String
  publishedAt_gte: String
  publishedAt_contains: String
  publishedAt_not_contains: String
  publishedAt_starts_with: String
  publishedAt_not_starts_with: String
  publishedAt_ends_with: String
  publishedAt_not_ends_with: String
  videoId: String
  videoId_not: String
  videoId_in: [String!]
  videoId_not_in: [String!]
  videoId_lt: String
  videoId_lte: String
  videoId_gt: String
  videoId_gte: String
  videoId_contains: String
  videoId_not_contains: String
  videoId_starts_with: String
  videoId_not_starts_with: String
  videoId_ends_with: String
  videoId_not_ends_with: String
  videoThumbnail: String
  videoThumbnail_not: String
  videoThumbnail_in: [String!]
  videoThumbnail_not_in: [String!]
  videoThumbnail_lt: String
  videoThumbnail_lte: String
  videoThumbnail_gt: String
  videoThumbnail_gte: String
  videoThumbnail_contains: String
  videoThumbnail_not_contains: String
  videoThumbnail_starts_with: String
  videoThumbnail_not_starts_with: String
  videoThumbnail_ends_with: String
  videoThumbnail_not_ends_with: String
  videoTitle: String
  videoTitle_not: String
  videoTitle_in: [String!]
  videoTitle_not_in: [String!]
  videoTitle_lt: String
  videoTitle_lte: String
  videoTitle_gt: String
  videoTitle_gte: String
  videoTitle_contains: String
  videoTitle_not_contains: String
  videoTitle_starts_with: String
  videoTitle_not_starts_with: String
  videoTitle_ends_with: String
  videoTitle_not_ends_with: String
  views: String
  views_not: String
  views_in: [String!]
  views_not_in: [String!]
  views_lt: String
  views_lte: String
  views_gt: String
  views_gte: String
  views_contains: String
  views_not_contains: String
  views_starts_with: String
  views_not_starts_with: String
  views_ends_with: String
  views_not_ends_with: String
  AND: [YoutubeCardDataWhereInput!]
  OR: [YoutubeCardDataWhereInput!]
  NOT: [YoutubeCardDataWhereInput!]
}

input YoutubeCardDataWhereUniqueInput {
  id: ID
}

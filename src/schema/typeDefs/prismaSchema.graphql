type AggregateCard {
  count: Int!
}

type AggregateCardData {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Card {
  id: ID!
  type: CardType!
  description: String
  user: User!
  cardData: CardData!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CardConnection {
  pageInfo: PageInfo!
  edges: [CardEdge]!
  aggregate: AggregateCard!
}

input CardCreateInput {
  id: ID
  type: CardType!
  description: String
  user: UserCreateOneWithoutCardsInput!
  cardData: CardDataCreateOneInput!
}

input CardCreateManyWithoutUserInput {
  create: [CardCreateWithoutUserInput!]
  connect: [CardWhereUniqueInput!]
}

input CardCreateWithoutUserInput {
  id: ID
  type: CardType!
  description: String
  cardData: CardDataCreateOneInput!
}

type CardData {
  id: ID!
  description: String!
}

type CardDataConnection {
  pageInfo: PageInfo!
  edges: [CardDataEdge]!
  aggregate: AggregateCardData!
}

input CardDataCreateInput {
  id: ID
  description: String!
}

input CardDataCreateOneInput {
  create: CardDataCreateInput
  connect: CardDataWhereUniqueInput
}

type CardDataEdge {
  node: CardData!
  cursor: String!
}

enum CardDataOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
}

type CardDataPreviousValues {
  id: ID!
  description: String!
}

type CardDataSubscriptionPayload {
  mutation: MutationType!
  node: CardData
  updatedFields: [String!]
  previousValues: CardDataPreviousValues
}

input CardDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CardDataWhereInput
  AND: [CardDataSubscriptionWhereInput!]
  OR: [CardDataSubscriptionWhereInput!]
  NOT: [CardDataSubscriptionWhereInput!]
}

input CardDataUpdateDataInput {
  description: String
}

input CardDataUpdateInput {
  description: String
}

input CardDataUpdateManyMutationInput {
  description: String
}

input CardDataUpdateOneRequiredInput {
  create: CardDataCreateInput
  update: CardDataUpdateDataInput
  upsert: CardDataUpsertNestedInput
  connect: CardDataWhereUniqueInput
}

input CardDataUpsertNestedInput {
  update: CardDataUpdateDataInput!
  create: CardDataCreateInput!
}

input CardDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [CardDataWhereInput!]
  OR: [CardDataWhereInput!]
  NOT: [CardDataWhereInput!]
}

input CardDataWhereUniqueInput {
  id: ID
}

type CardEdge {
  node: Card!
  cursor: String!
}

enum CardOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CardPreviousValues {
  id: ID!
  type: CardType!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CardScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: CardType
  type_not: CardType
  type_in: [CardType!]
  type_not_in: [CardType!]
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CardScalarWhereInput!]
  OR: [CardScalarWhereInput!]
  NOT: [CardScalarWhereInput!]
}

type CardSubscriptionPayload {
  mutation: MutationType!
  node: Card
  updatedFields: [String!]
  previousValues: CardPreviousValues
}

input CardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CardWhereInput
  AND: [CardSubscriptionWhereInput!]
  OR: [CardSubscriptionWhereInput!]
  NOT: [CardSubscriptionWhereInput!]
}

enum CardType {
  Youtube
}

input CardUpdateInput {
  type: CardType
  description: String
  user: UserUpdateOneRequiredWithoutCardsInput
  cardData: CardDataUpdateOneRequiredInput
}

input CardUpdateManyDataInput {
  type: CardType
  description: String
}

input CardUpdateManyMutationInput {
  type: CardType
  description: String
}

input CardUpdateManyWithoutUserInput {
  create: [CardCreateWithoutUserInput!]
  delete: [CardWhereUniqueInput!]
  connect: [CardWhereUniqueInput!]
  set: [CardWhereUniqueInput!]
  disconnect: [CardWhereUniqueInput!]
  update: [CardUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CardUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CardScalarWhereInput!]
  updateMany: [CardUpdateManyWithWhereNestedInput!]
}

input CardUpdateManyWithWhereNestedInput {
  where: CardScalarWhereInput!
  data: CardUpdateManyDataInput!
}

input CardUpdateWithoutUserDataInput {
  type: CardType
  description: String
  cardData: CardDataUpdateOneRequiredInput
}

input CardUpdateWithWhereUniqueWithoutUserInput {
  where: CardWhereUniqueInput!
  data: CardUpdateWithoutUserDataInput!
}

input CardUpsertWithWhereUniqueWithoutUserInput {
  where: CardWhereUniqueInput!
  update: CardUpdateWithoutUserDataInput!
  create: CardCreateWithoutUserInput!
}

input CardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: CardType
  type_not: CardType
  type_in: [CardType!]
  type_not_in: [CardType!]
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  user: UserWhereInput
  cardData: CardDataWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CardWhereInput!]
  OR: [CardWhereInput!]
  NOT: [CardWhereInput!]
}

input CardWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createCard(data: CardCreateInput!): Card!
  updateCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card
  updateManyCards(data: CardUpdateManyMutationInput!, where: CardWhereInput): BatchPayload!
  upsertCard(where: CardWhereUniqueInput!, create: CardCreateInput!, update: CardUpdateInput!): Card!
  deleteCard(where: CardWhereUniqueInput!): Card
  deleteManyCards(where: CardWhereInput): BatchPayload!
  createCardData(data: CardDataCreateInput!): CardData!
  updateCardData(data: CardDataUpdateInput!, where: CardDataWhereUniqueInput!): CardData
  updateManyCardDatas(data: CardDataUpdateManyMutationInput!, where: CardDataWhereInput): BatchPayload!
  upsertCardData(where: CardDataWhereUniqueInput!, create: CardDataCreateInput!, update: CardDataUpdateInput!): CardData!
  deleteCardData(where: CardDataWhereUniqueInput!): CardData
  deleteManyCardDatas(where: CardDataWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  card(where: CardWhereUniqueInput!): Card
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card]!
  cardsConnection(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardConnection!
  cardData(where: CardDataWhereUniqueInput!): CardData
  cardDatas(where: CardDataWhereInput, orderBy: CardDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CardData]!
  cardDatasConnection(where: CardDataWhereInput, orderBy: CardDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardDataConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  card(where: CardSubscriptionWhereInput): CardSubscriptionPayload
  cardData(where: CardDataSubscriptionWhereInput): CardDataSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String
  email: String!
  password: String!
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String
  email: String!
  password: String!
  cards: CardCreateManyWithoutUserInput
}

input UserCreateOneWithoutCardsInput {
  create: UserCreateWithoutCardsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCardsInput {
  id: ID
  name: String
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  cards: CardUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutCardsInput {
  create: UserCreateWithoutCardsInput
  update: UserUpdateWithoutCardsDataInput
  upsert: UserUpsertWithoutCardsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCardsDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutCardsInput {
  update: UserUpdateWithoutCardsDataInput!
  create: UserCreateWithoutCardsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  cards_every: CardWhereInput
  cards_some: CardWhereInput
  cards_none: CardWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
